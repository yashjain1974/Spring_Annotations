AJAX:

XHR : XMLHttpRequest

AJAX, which stands for Asynchronous JavaScript and XML, is not a single technology but rather a set of web development techniques that allows web applications to send and retrieve data from a server asynchronously without interfering with the display and behavior of the existing page.

In simpler terms, it's a way for a website to talk to a server in the background without having to reload the entire page every time it needs new information or needs to send something to the server.

How it Traditionally Works (The "Stack" of Technologies):
Before modern APIs like Fetch, AJAX traditionally involved a combination of:

HTML/XHTML and CSS: For structuring and styling the web page.

The Document Object Model (DOM): For dynamically interacting with and changing the content of the web page.

XMLHttpRequest (XHR) object: This is the core JavaScript object that allows web browsers to make HTTP requests to the server in the background.

XML: Initially used as the data format for exchanging data between the server and the browser, though JSON has largely replaced it due to its lighter weight and native compatibility with JavaScript.

JavaScript: The scripting language that ties all these technologies together, making the requests, handling the responses, and updating the DOM.


let xhr=new XMLHttpRequest();
        xhr.open("GET","https://jsonplaceholder.typicode.com/posts/1",true);
        xhr.onload=function(){
            if(xhr.status==200){
                let data=JSON.parse(xhr.responseText);
                document.body.innerHTML=`<h2>${data.title}</h2><p>${data.body}</p>`;
                console.log(data);
            }else{
                console.error("Error fetching data");
            }
        };
        xhr.send();


What is fetch()?
------------------
	fetch() is a modern Web API that returns a 
	promise to perform HTTP requests.


fetch("https://jsonplaceholder.typicode.com/posts/1")
  .then((response) => response.json())
  .then((data) => console.log("Post:", data))
  .catch((err) => console.error("Error fetching:", err));


fetch()           → resolves to → Response object
   ↓
response.json()   → resolves to → Actual data (as JSON)
   ↓
Your logic on the data


With async/await:
----------------------
async function getPost() {
  try {
    const response = await fetch("https://jsonplaceholder.typicode.com/posts/1");
    const data = await response.json();
    console.log("Post:", data);
  } catch (e) {
    console.error("Fetch error:", e);
  }
}
getPost();

Advantage of  async/await
----------------------------
Looks like synchronous code.
Easier for beginners and pros to follow the logic step by step.
No deeply nested .then() callbacks (avoids "callback hell")
Better Error Handling with try/catch