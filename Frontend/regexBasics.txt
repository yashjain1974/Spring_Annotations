Basics of regular ex in javascript
------------------------------------

basics of reg expression
----------------------
	==> A regular expression is a series of codes used  to describe a series of characters

	==>Just like you surround strings with quotes, 
		you surround a regex with slashes /

	// var regPat = /[0-9]{1,5}\s[A-Z]{2}\b[a-z]{2,}/
	767 RA tarun

	// String that starts with 1 to 5 Numbers, a space, 2 Uppercase letters, Word Boundary, 2 or 
	more lowercase char.......

Basic Syntax ^ and $
-------------------------------------
 ^ ===> indicate the beginning of the string
 $===>  is used to mark the end


[] used to define set of characters that may match
-------------------------------------------------------------------------

[12345] 		// Matches "1" and "3", but not "a" or "12"
[1-5] 			// Same as the previous example
[a-z] 			// Matches any lowercase letter (from the English alphabet)
[0-9a-zA-Z] 		// Matches any letter or digit

[^  ]  ==> invert the meaning
-------------------------------------
[^a-zA-Z]		// Matches anything except a letter


The characters ?, +, and * 
============================
	? ===> “the preceding character is optional”, 			optinal
	+ ====> “one or more of the previous character”			1 to m
	* ====> means “zero or more of the previous character”.		0 to m


bana*na	
banaaana

// Matches "banana" and "banna",
		// but not "banaana".

bana+na	// Matches "banana" and "banaana",
		// but not "banna".

bana*na	// Matches "banna", "banana", and "banaaana",
		// but not "bnana".

^[a-zA-Z]+$ // Matches any string of one or more
	   // letters and nothing else.

	
( ) ====> used to group strings together to apply ?, +, or * to them as a whole
----------------------------------------------------------------------------------
ba(na)+na  // Matches "banana" and "banananana",
	// but not "bana" or "banaana".





using the pipe (|) character to separate them.
-------------------------------------------------------------------
^(ba|na)+$		// Matches "banana", "nababa", "baba",
		 	// "nana", "ba", "na", and others.


Some special code for matching one char
------------------------------------------
\n // A newline character
\r // A carriage return character
\t // A tab character
\b // A word boundary (the start or end of a word)
\B // Anything but a word boundary
\d // Any digit (same as [0-9])
\D // Anything but a digit (same as [^0-9])
\s // Single whitespace (space, tab, newline, etc.)
\S // Single nonwhitespace
\w // A "word character" (same as [A-Za-z0-9_])
\W // A "nonword character" (same as [^A-Za-z0-9_])

Using Regular Expressions In JavaScript
--------------------------------------

creating regex in javascript
var myRE = /regexp/;


reg for ^(ba|na)+$	
------------------------
var myRE = /^(ba|na)+$/;



 g (for global) and i (for ignore case) 
 ---------------------------------------
 By default javascript regular expressions are case sensitive and only search for the first match in any given string. 

adding the g (for global) and i (for ignore case) modifers after the second /, you can make a regular expression search
for all matches in the string and ignore case, respectively. Here are a few example regular expressions.

	test1 Test2 TEST3
/Test[0-9]+/ 			“Test2” only
/Test[0-9]+/i 			“test1” only
/Test[0-9]+/gi 			“test1”, “Test2”, and “TEST3”