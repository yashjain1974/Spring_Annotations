---------------------API Gateway -------------------------

An API Gateway is like the front door or traffic controller for all your microservices.

Instead of the client calling each service directly (which is messy and hard to manage), the Gateway sits in front and routes requests to the appropriate microservice.

Key Responsibilities of an API Gateway
Function	What It Does
🧭 Routing	Forwards requests to the correct microservice (like a traffic router).
🛡️ Security	Authenticates users, verifies tokens, handles role-based access.
🔁 Load Balancing	Distributes traffic among instances of services (with Eureka + Ribbon).
💣 Fault Tolerance	Works with Resilience4j (e.g., timeouts, retries, circuit breakers).
🚪 Entry Point (Single URL)	Client only knows http://gateway:port, not 5–10 separate service URLs.
🎭 Rate Limiting, Caching, etc.	Controls how often APIs can be hit, caches responses if needed.
🧼 Request/Response Filtering	Modifies headers, logs traffic, or transforms payloads.

Dependency:

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-gateway</artifactId>
		</dependency>

pom.xml

#spring.application.name=gateway

server:
  port: 8072
spring:
  application:
    name: gateway

eureka:
  instance:
    prefer-ip-address: true
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8070/eureka/

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true
  endpoint:
    gateway:
      enabled: true
    health:
      probes:
        enabled: true



@Configuration
public class RouteConfig {
    @Bean
    public RouteLocator busycoderRouteConfig(RouteLocatorBuilder routeLocatorBuilder) {
        return routeLocatorBuilder.routes()
                .route(p -> p
                        .path("/productstore/productsms/**")
                        .filters( f -> f.rewritePath("/productstore/productsms/(?<segment>.*)","/${segment}")
                                .addResponseHeader("X-Response-Time", LocalDateTime.now().toString()))
                        .uri("lb://PRODUCTS"))
                .route(p -> p
                        .path("/productstore/couponsms/**")
                        .filters( f -> f.rewritePath("/productstore/couponsms/(?<segment>.*)","/${segment}")
                                .addResponseHeader("X-Response-Time", LocalDateTime.now().toString()))
                        .uri("lb://COUPONS"))
               .build();
    }
}


