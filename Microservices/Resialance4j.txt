---------------------------Resilience4j-------------------


Resilience4j is used in a Spring Boot microservice architecture to make your services fault-tolerant, resilient, and responsive under failure conditions ‚Äî especially when calling other microservices (like using Feign or RestTemplate).

Resilience4j solves this by applying patterns like:

Pattern	What It Does
‚úÖ Circuit Breaker	Prevents repeated calls to failing services.
‚è±Ô∏è Time Limiter	Fails fast when a service is too slow.
‚ôªÔ∏è Retry	Retries failed calls with a delay.
üìâ Rate Limiter	Limits number of calls per second.
üß≥ Bulkhead	Limits number of concurrent calls (like thread pools).



Download dependency

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
		</dependency>




@FeignClient(name="COUPONS",fallback=CouponServiceFallback.class)
//This is hardcoded
//@FeignClient(name = "coupon-service", url = "http://localhost:8083")
public interface CouponServiceProxy {
    @GetMapping("coupon/{couponCode}")
    public Coupon getCouponByCode(@PathVariable String couponCode);
}


@Component
public class CouponServiceFallback implements CouponServiceProxy{

	@Override
	public Coupon getCouponByCode(String couponCode) {
		// TODO Auto-generated method stub
		return new Coupon("SUP05",5,LocalDateTime.now());
	}
	

}




